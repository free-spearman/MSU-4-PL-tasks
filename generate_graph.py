def generate_data(n: int, size: int):
    """
    Генерирует очень хитрый граф
    :param size: размер "куба" во всех направлениях
    :param n: количество "кубов"
    :returns graph: граф в формате тапла для ловли выводами типа print и вывода в файл

    два куба, с соединенными краями
    стоимости по времени становятся больше в направлении отрицательных осей, по деньгам - наоборот
    направления ребер вдоль горизонтальной плоскости должны меняться каждый раз, 
    например 0->1<-2->3<-4->5, с разными четностями
    ребра вдоль вертикальной оси направлены вниз, оси из нижней плоскости идут вверх

    0---1
    |\  |\
    2---3 \
     \ \ \ \
      \ 4-\-5
       \|  \|
        6---7

    Наименования городов - n{n}_{x}_{y}_{z}
    где 
        x, y, z - координаты города внутри куба
        n - номер куба
    """
    
    maxcost = (size-1)*3
    for cube in range(n):
        for k in range(size):
            for j in range(size):
                for i in range(size):
    #                 a = f"{i}_{j}_{k}"
    #                 b = f"{(i+1)%size}_{(j+1)%size}_{(k+1)%size}"
                    s = i+k+j
                    a = f"\"n{cube}_{i}_{j}_{k}\""
                    b = f"\"n{cube}_{i}_{j}_{(k+1)%size}\""
                    if s % 2 == 0: # если источник
    #                     print(a, "->", b, end=";\n")
                        print(a, b, "\"транспорт\"", (s+1)**(cube+1), (maxcost-s+1)**(cube+1))
                    else:
                        print(b, a, "\"транспорт\"", (s+1)**(cube+1), (maxcost-s+1)**(cube+1))
#                         print(b, "->", a, end=";\n")

                    a = f"\"n{cube}_{i}_{j}_{k}\""
                    b = f"\"n{cube}_{i}_{(j+1)%size}_{k}\""
                    if s % 2 == 0:
#                         print(b, "->", a, end=";\n")
                        print(b, a, "\"транспорт\"", (s+1)**(cube+1), (maxcost-s+1)**(cube+1))
                    else:
#                         print(a, "->", b, end=";\n")
                        print(a, b, "\"транспорт\"", (s+1)**(cube+1), (maxcost-s+1)**(cube+1))
                    a = f"\"n{cube}_{i}_{j}_{k}\""
                    b = f"\"n{cube}_{(i+1)%size}_{j}_{k}\""
                    print(a, b, "\"транспорт\"", (s+1)**(cube+1), (maxcost-s+1)**(cube+1))
                
                
                
if __name__ == "__main__":
    generate_data(2, 10)
    input()
